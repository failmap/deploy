# docker-compose configuration to build a complete local installation of the failmap platform.

version: "3"
services:
  # message broker to distribute tasks
  broker:
    image: rabbitmq

  # stateful storage
  database:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_ROOT_PASSWORD:-secret}"
      MYSQL_DATABASE: "${DB_NAME:-failmap}"
      MYSQL_USER: "${DB_USER:-user}"
      MYSQL_PASSWORD: "${DB_PASSWORD:-secret}"

  # scan task executors, idempotent tasks that perform a scan with provided input and generate a result
  worker:
    image: failmap:admin
    build:
      context: source/admin
      dockerfile: "${PWD}/Dockerfile"
    depends_on:
      - broker
    environment:
      QUEUES: scan
  worker-2:
    image: failmap:admin
    build:
      context: source/admin
      dockerfile: "${PWD}/Dockerfile"
    links:
      - broker
    environment:
      BROKER_URL: amqp://guest:guest@broker
      QUEUES: scan
    command: [ "/usr/local/bin/failmap-admin", "worker" ]

  # administrative task executer, these tasks require DB access, for example result parser, aggregators.
  adminworker:
    image: failmap:admin
    build:
      context: source/admin
      dockerfile: "${PWD}/Dockerfile"
    links:
      - broker
      - database
    environment:
      BROKER_URL: amqp://guest:guest@broker
      QUEUES: administrative
      DB_HOST: database
      DB_ENGINE: mysql
      DB_NAME: "${DB_NAME:-failmap}"
      DB_NAME: "${DB_NAME:-failmap}"
      DB_USER: "${DB_USER:-root}"
    command: [ "/usr/local/bin/failmap-admin", "worker" ]

  # administrative web interface and task initiator
  admin:
    image: failmap:admin
    build:
      context: source/admin
      dockerfile: "${PWD}/Dockerfile"
    links:
      - broker
      - database
    environment:
      BROKER_URL: amqp://guest:guest@broker
      DB_HOST: database
      DB_ENGINE: mysql
      DB_NAME: "${DB_NAME:-failmap}"
      DB_USER: "${DB_USER:-user}"
      DB_PASSWORD: "${DB_PASSWORD:-secret}"
    ports:
      - 8080:8080
    # django decides what to log based on type of console
    tty: true
    command: [ "/usr/local/bin/failmap-admin", "runserver", "0.0.0.0:8080" ]

  # visitor facing, high performance frontend
  website:
    image: failmap:admin
    build:
      context: source/admin
      dockerfile: "${PWD}/Dockerfile"
    links:
      - database
    environment:
      DB_HOST: database
      DB_ENGINE: mysql
      DB_NAME: "${DB_NAME:-failmap}"
      DB_USER: "${DB_RO_USER:-user}"
      DB_PASSWORD: "${DB_RO_PASSWORD:-secret}"
    ports:
      - 8081:8081
    # django decides what to log based on type of console
    tty: true
    command: [ "/usr/local/bin/failmap-admin", "runserver", "0.0.0.0:8081" ]
